pipeline {
    agent any

    environment {
        DOCKER_TAG = getVersion()
        DOCKER_IMAGE = "ameerbatcha/nodeapp:${DOCKER_TAG}"
    }

    stages {
        stage('SCM Checkout') {
            steps {
                deleteDir()
                git 'https://github.com/Ameerbatcha/nodeapp.git'
            }
        }

        stage('Zip Files') {
            steps {
                sh 'tar czf Node.tar.gz package.json public src'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                     echo "${DOCKER_IMAGE}"
                    //   def dockerfile = 'Dockerfile'
                    // def imageTag = env.DOCKER_IMAGE
                    // docker.build(imageTag, '-f ' + dockerfile + ' .')
                    def dockerImage = docker.build('ameerbatcha/nodeapp:${DOCKER_TAG}', '.')

                   
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    def imageTag = env.DOCKER_IMAGE

                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                    // docker.image(imageTag).push()
                       dockerImage.push()
                    }
                }
            }
        }

        stage('Deploy with Ansible') {
            steps {
                script {
                    def ansiblePlaybookContent = '''
                    - hosts: docker
                      become: true

                      tasks:
                        - name: Install python pip
                          yum:
                            name: python-pip
                            state: present
                        
                        - name: Install docker-py python module
                          pip:
                            name: docker-py
                            state: present
                          
                         - name: Run Docker Container
                            docker_container:
                              name: nodecontainer
                              image: "{{ DOCKER_IMAGE }}"
                              state: started
                              published_ports:
                                - 0.0.0.0:8083:3000
                      '''

                    writeFile(file: 'inline_playbook.yml', text: ansiblePlaybookContent)

                    def ansibleInventoryContent = '''[dockeradmin]
                    172.31.43.130  ansible_user=ec2-user
                    '''

                    writeFile(file: 'dev.inv', text: ansibleInventoryContent)

                   
                        ansiblePlaybook(
                            inventory: 'dev.inv',
                            playbook: 'inline_playbook.yml',
                            extras: "-e DOCKER_IMAGE=${DOCKER_IMAGE}",
                            credentialsId: 'dev-dockerhost',
                            installation: 'ansible'
                        )
                    
                }
            }
        }
    }
}

def getVersion() {
    def commitHash = sh label: '', returnStdout: true, script: 'git rev-parse --short HEAD'
    return commitHash
}
